#####################
# prometheus server #
#####################

---
# Source: prometheus/templates/server/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    component: "server"
    app: prometheus
    release: prometheus
    chart: prometheus-13.3.3
    heritage: Helm
  name: prometheus-server
  namespace: monitoring-system
  annotations:
    {}
---
# Source: prometheus/templates/server/cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    component: "server"
    app: prometheus
    release: prometheus
    chart: prometheus-13.3.3
    heritage: Helm
  name: prometheus-server
  namespace: monitoring-system
data:
  limits.conf: |
    * soft nofile 65534
    * hard nofile 65534
    root soft nofile 65534
    root hard nofile 65534
  alerting_rules.yml: |
    {}
  alerts: |
    {}
  prometheus.yml: |
    global:
      evaluation_interval: 15s
      scrape_interval: 15s
      scrape_timeout: 10s
    rule_files:
    - /etc/config/recording_rules.yml
    - /etc/config/alerting_rules.yml
    - /etc/config/rules
    - /etc/config/alerts
    scrape_configs:
    - honor_labels: true
      job_name: tidb-cluster-components
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - action: drop
        regex: Pending|Succeeded|Failed
        source_labels:
        - __meta_kubernetes_pod_phase
      - action: keep
        regex: "true"
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_scrape
      - action: keep
        regex: pd|tidb|tikv|tiflash|ticdc|pump|importer|drainer|tidb-lightning|he3proxy
        source_labels:
        - __meta_kubernetes_pod_label_app_kubernetes_io_component
      - action: replace
        regex: (.+);(.+);(pd|tidb|tikv|tiflash|ticdc);(.+);(.+)
        replacement: $1.$2-$3-peer.$4:$5
        source_labels:
        - __meta_kubernetes_pod_name
        - __meta_kubernetes_pod_label_app_kubernetes_io_instance
        - __meta_kubernetes_pod_label_app_kubernetes_io_component
        - __meta_kubernetes_namespace
        - __meta_kubernetes_pod_annotation_prometheus_io_port
        target_label: __address__
      - action: replace
        regex: (.+);(.+);(tiflash);(.+);(.+)
        replacement: $1.$2-$3-peer.$4:$5
        source_labels:
        - __meta_kubernetes_pod_name
        - __meta_kubernetes_pod_label_app_kubernetes_io_instance
        - __meta_kubernetes_pod_label_app_kubernetes_io_component
        - __meta_kubernetes_namespace
        - __meta_kubernetes_pod_annotation_tiflash_proxy_prometheus_io_port
        target_label: __address__
      - action: replace
        regex: (.+);(.+);(pump|importer);(.+);(.+)
        replacement: $1.$2-$3.$4:$5
        source_labels:
        - __meta_kubernetes_pod_name
        - __meta_kubernetes_pod_label_app_kubernetes_io_instance
        - __meta_kubernetes_pod_label_app_kubernetes_io_component
        - __meta_kubernetes_namespace
        - __meta_kubernetes_pod_annotation_prometheus_io_port
        target_label: __address__
      - action: replace
        regex: (.+);(.+);(drainer);(.+);(.+)
        replacement: $1.$2.$4:$5
        source_labels:
        - __meta_kubernetes_pod_name
        - __meta_kubernetes_pod_label_app_kubernetes_io_name
        - __meta_kubernetes_pod_label_app_kubernetes_io_component
        - __meta_kubernetes_namespace
        - __meta_kubernetes_pod_annotation_prometheus_io_port
        target_label: __address__
      - action: replace
        regex: (.+);(.+);(tidb-lightning);(.+);(.+)
        replacement: $2.$4:$5
        source_labels:
        - __meta_kubernetes_pod_name
        - __meta_kubernetes_pod_label_app_kubernetes_io_name
        - __meta_kubernetes_pod_label_app_kubernetes_io_component
        - __meta_kubernetes_namespace
        - __meta_kubernetes_pod_annotation_prometheus_io_port
        target_label: __address__
      - action: replace
        regex: ([^:]+)(?::\d+)?;(he3proxy);(.+)
        replacement: $1:$3
        source_labels:
        - __address__
        - __meta_kubernetes_pod_label_app_kubernetes_io_component
        - __meta_kubernetes_pod_annotation_prometheus_io_port
        target_label: __address__
      - action: replace
        regex: (.+)
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_path
        target_label: __metrics_path__
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: kubernetes_namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_label_app_kubernetes_io_instance
        target_label: cluster
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_name
        target_label: instance
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_label_app_kubernetes_io_component
        target_label: component
      - action: replace
        separator: '-'
        source_labels:
        - __meta_kubernetes_namespace
        - __meta_kubernetes_pod_label_app_kubernetes_io_instance
        target_label: tidb_cluster
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      scheme: http
      scrape_interval: 15s
      tls_config:
        insecure_skip_verify: true
  recording_rules.yml: |
    {}
  rules: |
    {}
---
# Source: prometheus/templates/server/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    component: "server"
    app: prometheus
    release: prometheus
    chart: prometheus-13.3.3
    heritage: Helm
  name: prometheus-server
rules:
  - apiGroups:
      - ""
    resources:
      - nodes
      - nodes/proxy
      - nodes/metrics
      - services
      - endpoints
      - pods
      - ingresses
      - configmaps
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "extensions"
      - "networking.k8s.io"
    resources:
      - ingresses/status
      - ingresses
    verbs:
      - get
      - list
      - watch
  - nonResourceURLs:
      - "/metrics"
    verbs:
      - get
---
# Source: prometheus/templates/server/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    component: "server"
    app: prometheus
    release: prometheus
    chart: prometheus-13.3.3
    heritage: Helm
  name: prometheus-server
subjects:
  - kind: ServiceAccount
    name: prometheus-server
    namespace: monitoring-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-server
---
# Source: prometheus/templates/server/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    component: "server"
    app: prometheus
    release: prometheus
    chart: prometheus-13.3.3
    heritage: Helm
  name: prometheus-server-headless
  namespace: monitoring-system
spec:
  clusterIP: None
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 9090

  selector:
    component: "server"
    app: prometheus
    release: prometheus
---
# Source: prometheus/templates/server/service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    component: "server"
    app: prometheus
    release: prometheus
    chart: prometheus-13.3.3
    heritage: Helm
  name: prometheus-server
  namespace: monitoring-system
spec:
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 9090
      nodePort: 30090
  selector:
    component: "server"
    app: prometheus
    release: prometheus
  sessionAffinity: ClientIP
  type: "NodePort"
---
# Source: prometheus/templates/server/sts.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    component: "server"
    app: prometheus
    release: prometheus
    chart: prometheus-13.3.3
    heritage: Helm
  name: prometheus-server
  namespace: monitoring-system
spec:
  serviceName: prometheus-server-headless
  selector:
    matchLabels:
      component: "server"
      app: prometheus
      release: prometheus
  replicas: 2
  podManagementPolicy: OrderedReady
  template:
    metadata:
      labels:
        component: "server"
        app: prometheus
        release: prometheus
        chart: prometheus-13.3.3
        heritage: Helm
    spec:
      enableServiceLinks: true
      serviceAccountName: prometheus-server
      initContainers:
      - name: sysctl-init
        image: ubuntu:16.04
        imagePullPolicy: IfNotPresent
        command:
        - /bin/sh
        - -c
        - 'sysctl -w fs.inotify.max_user_watches=81920 && chown -R 65534:65534 /data'
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /data
          name: storage-volume
      containers:
        - name: prometheus-server-configmap-reload
          image: "jimmidyson/configmap-reload:v0.5.0"
          imagePullPolicy: "IfNotPresent"
          args:
            - --volume-dir=/etc/config
            - --webhook-url=http://127.0.0.1:9090/-/reload
          resources:
            {}
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
              readOnly: true
          securityContext:
            runAsGroup: 65534
            runAsNonRoot: true
            runAsUser: 65534
        - name: prometheus-server
          image: "prom/prometheus:v2.24.0"
          imagePullPolicy: "IfNotPresent"
          args:
            - --storage.tsdb.retention.time=5d
            - --config.file=/etc/config/prometheus.yml
            - --storage.tsdb.path=/data
            - --web.console.libraries=/etc/prometheus/console_libraries
            - --web.console.templates=/etc/prometheus/consoles
            - --web.enable-lifecycle
            - --web.enable-admin-api
          ports:
            - containerPort: 9090
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 9090
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 30
            failureThreshold: 3
            successThreshold: 1
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9090
            initialDelaySeconds: 30
            periodSeconds: 15
            timeoutSeconds: 30
            failureThreshold: 3
            successThreshold: 1
          resources:
            {}
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
            - name: config-volume
              subPath: limits.conf
              mountPath: /etc/security/limits.conf
            - name: storage-volume
              mountPath: /data
              subPath: ""
          securityContext:
            runAsGroup: 65534
            runAsNonRoot: true
            runAsUser: 65534
      securityContext:
        fsGroup: 65534
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: prometheus
                  component: server
                  release: prometheus
              topologyKey: kubernetes.io/hostname
            weight: 1
      terminationGracePeriodSeconds: 300
      volumes:
        - name: config-volume
          configMap:
            name: prometheus-server
        - name: storage-volume
          hostPath:
            path: /apps/data/he3db-prometheus
            type: DirectoryOrCreate

